name: Python CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  run-script:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.10]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Lint with flake8
        run: |
          echo "Running flake8..."
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run Tests with pytest
        run: |
          echo "Running unit tests..."
          pytest tests/ --maxfail=1 --disable-warnings -q

      - name: Run test with coverage
        run: |
          echo "Running unit tests with coverage..."
          pytest --cov=src tests/ --maxfail=1 --disable-warnings -q

      - name: Formate code with black
        run: |
          pip install black
          echo "Running black..."
          black src/ tests/ --check

      - name: Security linting with Bandit
        run: |
          echo "Running Bandit security checks..."
          bandit -r src || true

      - name: Dependency vulnerability scan with Safety
        run: |
          echo "Running Safety dependency scan..."
          safety check

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t ghcr.io/harshdeep2003/my-python-app:latest .

      - name: Push Docker Image
        run: |
          echo "Pushing Docker image..."
          docker push ghcr.io/harshdeep2003/my-python-app:latest

      #      - name: Run script
      #        run: python src/main.py

      - name: Notify Discord
        if: always()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS=$([[ "${{ job.status }}" == "success" ]] && echo "✅ Success" || echo "❌ Failure")
          curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"CI workflow finished with status: $STATUS\"}" $DISCORD_WEBHOOK_URL
